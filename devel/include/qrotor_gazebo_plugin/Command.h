// Generated by gencpp from file qrotor_gazebo_plugin/Command.msg
// DO NOT EDIT!


#ifndef QROTOR_GAZEBO_PLUGIN_MESSAGE_COMMAND_H
#define QROTOR_GAZEBO_PLUGIN_MESSAGE_COMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <qrotor_gazebo_plugin/Spline.h>

namespace qrotor_gazebo_plugin
{
template <class ContainerAllocator>
struct Command_
{
  typedef Command_<ContainerAllocator> Type;

  Command_()
    : header()
    , mode(0)
    , thrust(0.0)
    , yaw()
    , command()
    , spline()  {
    }
  Command_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mode(0)
    , thrust(0.0)
    , yaw(_alloc)
    , command(_alloc)
    , spline(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef double _thrust_type;
  _thrust_type thrust;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _yaw_type;
  _yaw_type yaw;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _command_type;
  _command_type command;

   typedef  ::qrotor_gazebo_plugin::Spline_<ContainerAllocator>  _spline_type;
  _spline_type spline;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MODE_PASS_THROUGH)
  #undef MODE_PASS_THROUGH
#endif
#if defined(_WIN32) && defined(MODE_ATTITUDE)
  #undef MODE_ATTITUDE
#endif
#if defined(_WIN32) && defined(MODE_ATTITUDE_RATE)
  #undef MODE_ATTITUDE_RATE
#endif
#if defined(_WIN32) && defined(MODE_THRUST_YAW)
  #undef MODE_THRUST_YAW
#endif
#if defined(_WIN32) && defined(MODE_THRUST_YAW_RATE)
  #undef MODE_THRUST_YAW_RATE
#endif
#if defined(_WIN32) && defined(MODE_POSITION)
  #undef MODE_POSITION
#endif
#if defined(_WIN32) && defined(MODE_POSITION_SPLINE)
  #undef MODE_POSITION_SPLINE
#endif

  enum {
    MODE_PASS_THROUGH = 0u,
    MODE_ATTITUDE = 1u,
    MODE_ATTITUDE_RATE = 2u,
    MODE_THRUST_YAW = 3u,
    MODE_THRUST_YAW_RATE = 4u,
    MODE_POSITION = 5u,
    MODE_POSITION_SPLINE = 6u,
  };


  typedef boost::shared_ptr< ::qrotor_gazebo_plugin::Command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qrotor_gazebo_plugin::Command_<ContainerAllocator> const> ConstPtr;

}; // struct Command_

typedef ::qrotor_gazebo_plugin::Command_<std::allocator<void> > Command;

typedef boost::shared_ptr< ::qrotor_gazebo_plugin::Command > CommandPtr;
typedef boost::shared_ptr< ::qrotor_gazebo_plugin::Command const> CommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qrotor_gazebo_plugin::Command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qrotor_gazebo_plugin::Command_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qrotor_gazebo_plugin::Command_<ContainerAllocator1> & lhs, const ::qrotor_gazebo_plugin::Command_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mode == rhs.mode &&
    lhs.thrust == rhs.thrust &&
    lhs.yaw == rhs.yaw &&
    lhs.command == rhs.command &&
    lhs.spline == rhs.spline;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qrotor_gazebo_plugin::Command_<ContainerAllocator1> & lhs, const ::qrotor_gazebo_plugin::Command_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qrotor_gazebo_plugin

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qrotor_gazebo_plugin::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qrotor_gazebo_plugin::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qrotor_gazebo_plugin::Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qrotor_gazebo_plugin::Command_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qrotor_gazebo_plugin::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qrotor_gazebo_plugin::Command_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qrotor_gazebo_plugin::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0675820010bfd865d593e5dde5d5a059";
  }

  static const char* value(const ::qrotor_gazebo_plugin::Command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0675820010bfd865ULL;
  static const uint64_t static_value2 = 0xd593e5dde5d5a059ULL;
};

template<class ContainerAllocator>
struct DataType< ::qrotor_gazebo_plugin::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qrotor_gazebo_plugin/Command";
  }

  static const char* value(const ::qrotor_gazebo_plugin::Command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qrotor_gazebo_plugin::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Command msg \n"
"\n"
"# control mode flags\n"
"uint8 MODE_PASS_THROUGH = 0\n"
"uint8 MODE_ATTITUDE = 1\n"
"uint8 MODE_ATTITUDE_RATE = 2\n"
"uint8 MODE_THRUST_YAW = 3\n"
"uint8 MODE_THRUST_YAW_RATE = 4\n"
"uint8 MODE_POSITION = 5\n"
"uint8 MODE_POSITION_SPLINE = 6\n"
"\n"
"# message\n"
"Header header\n"
"uint8 mode\n"
"float64 thrust\n"
"float64[] yaw\n"
"geometry_msgs/Vector3[] command\n"
"qrotor_gazebo_plugin/Spline spline\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: qrotor_gazebo_plugin/Spline\n"
"float64[] x\n"
"float64[] y\n"
"float64[] z\n"
;
  }

  static const char* value(const ::qrotor_gazebo_plugin::Command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qrotor_gazebo_plugin::Command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mode);
      stream.next(m.thrust);
      stream.next(m.yaw);
      stream.next(m.command);
      stream.next(m.spline);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qrotor_gazebo_plugin::Command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qrotor_gazebo_plugin::Command_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "thrust: ";
    Printer<double>::stream(s, indent + "  ", v.thrust);
    s << indent << "yaw[]" << std::endl;
    for (size_t i = 0; i < v.yaw.size(); ++i)
    {
      s << indent << "  yaw[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.yaw[i]);
    }
    s << indent << "command[]" << std::endl;
    for (size_t i = 0; i < v.command.size(); ++i)
    {
      s << indent << "  command[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.command[i]);
    }
    s << indent << "spline: ";
    s << std::endl;
    Printer< ::qrotor_gazebo_plugin::Spline_<ContainerAllocator> >::stream(s, indent + "  ", v.spline);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QROTOR_GAZEBO_PLUGIN_MESSAGE_COMMAND_H
